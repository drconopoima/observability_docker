networks:
  default:
    name: observability-network
    external: true

services:

  ######################################################################################
  ######################################################################################
  ############################## BACKEND APPLICATION ###################################
  ######################################################################################
  ######################################################################################
  backend:
    container_name: backend
    image: localhost/backend
    build:
      context: generate_data_application/backend
      dockerfile: Dockerfile
    ports:
      - 5050:5050
      - 8000:8000
    depends_on:
      - db
    labels:
      namespace: monitoring

  ######################################################################################
  ######################################################################################
  ############################## DATABASE APPLICATION ##################################
  ######################################################################################
  ######################################################################################
  db:
    container_name: db
    image: localhost/db
    build:
      context: generate_data_application/db
      dockerfile: Dockerfile
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    ports:
      - 5432:5432
    labels:
      namespace: monitoring

  # Metrics
  db_exporter:
    container_name: db_exporter
    image: docker.io/wrouesnel/postgres_exporter:latest
    environment:
      - DATA_SOURCE_URI=db:5432/postgres?sslmode=disable
      - DATA_SOURCE_USER=postgres
      - DATA_SOURCE_PASS=docker
    depends_on:
      - db
    labels:
      namespace: monitoring

  ######################################################################################
  ######################################################################################
  ################################### Unit tests #######################################
  ######################################################################################
  ######################################################################################
  k6-backend:
    container_name: k6-backend
    image: docker.io/grafana/k6:0.56.0
    volumes:
      - ./generate_data_application/load_tests/script.js:/scripts/script.js
    command: run /scripts/script.js
    environment:
      - K6_PROMETHEUS_RW_SERVER_URL=http://nginx:3702/api/v1/push
      - K6_PROMETHEUS_RW_HEADERS_X-Scope-OrgID=backend
      - K6_PROMETHEUS_RW_TREND_AS_NATIVE_HISTOGRAM=true
      - K6_OUT=experimental-prometheus-rw
    deploy:
      restart_policy:
        condition: any
        delay: 15s
        window: 120s
    depends_on:
      - backend
    labels:
      namespace: monitoring

  ######################################################################################
  ######################################################################################
  ################################# MINIO STORAGE ######################################
  ######################################################################################
  ######################################################################################
  minio:
    container_name: Minio
    image: docker.io/minio/minio
    entrypoint: [""]
    command: ["sh", "-c", "mkdir -p /data/mimir && mkdir -p /data/tempo && mkdir -p /data/loki-data && mkdir -p /data/loki-ruler && minio server --quiet /data"]
    environment:
      - MINIO_ROOT_USER=mimir
      - MINIO_ROOT_PASSWORD=supersecret
    volumes:
      - minio-data:/data
    labels:
      namespace: monitoring

  ######################################################################################
  ######################################################################################
  ################################## NGINX PROXY #######################################
  ######################################################################################
  ######################################################################################
  nginx:
    container_name: Nginx
    image: docker.io/library/nginx:latest
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - mimir1
      - mimir2
      - mimir3
      - tempo1
      - tempo2
      - tempo3
      - loki1
      - loki2
      - loki3
    labels:
      namespace: monitoring

  ######################################################################################
  ######################################################################################
  ############################# GRAFANA VISUALIZATION ##################################
  ######################################################################################
  ######################################################################################
  grafana:
    container_name: Grafana
    image: docker.io/grafana/grafana:11.4.0
    ports:
      - 3000:3000
    volumes:
      - "./grafana/provisioning/:/etc/grafana/provisioning/"
      - "./grafana/dashboards/:/var/lib/grafana/dashboards/"
      - "./grafana/config.ini:/etc/grafana/grafana.ini"
    labels:
      namespace: monitoring
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
      GF_AUTH_DISABLE_LOGIN_FORM: "true"
      GF_LOG_LEVEL: "info"
  
  ######################################################################################
  ######################################################################################
  ############################### GRAFANA AGENT SCRAPE #################################
  ######################################################################################
  ######################################################################################
  agent:
    container_name: agent
    image: docker.io/grafana/agent:v0.41.1
    volumes:
      - ./agent/agent.yaml:/etc/agent.yaml
    command:
      - --config.file=/etc/agent.yaml
    depends_on:
      - tempo1
      - tempo2
      - tempo3
      - mimir1
      - mimir2
      - mimir3
      - loki1
      - loki2
      - loki3

  ######################################################################################
  ######################################################################################
  ############################### GRAFANA LOKI LOGS ####################################
  ######################################################################################
  ######################################################################################
  loki1:
    container_name: Loki-1
    image: docker.io/grafana/loki:2.9.11
    command: "-config.file=/etc/loki/config.yaml -target=all"
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    networks:
      default:
        aliases:
          - loki
    labels:
      namespace: monitoring

  loki2:
    container_name: Loki-2
    image: docker.io/grafana/loki:2.9.11
    command: "-config.file=/etc/loki/config.yaml -target=all"
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    networks:
      default:
        aliases:
          - loki
    labels:
      namespace: monitoring

  loki3:
    container_name: Loki-3
    image: docker.io/grafana/loki:2.9.11
    command: "-config.file=/etc/loki/config.yaml -target=all"
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    networks:
      default:
        aliases:
          - loki
    labels:
      namespace: monitoring

  ######################################################################################
  ######################################################################################
  ############################## GRAFANA MIMIR METRICS #################################
  ######################################################################################
  ######################################################################################
  mimir1:
    container_name: Mimir-1
    image: docker.io/grafana/mimir:2.13.1
    command: ["-config.file=/etc/mimir.yaml"]
    hostname: mimir1
    depends_on:
      - minio
    volumes:
      - ./mimir/mimir.yaml:/etc/mimir.yaml
      - mimir1-data:/data
    labels:
      namespace: monitoring

  mimir2:
    container_name: Mimir-2
    image: docker.io/grafana/mimir:2.13.1
    command: ["-config.file=/etc/mimir.yaml"]
    hostname: mimir2
    depends_on:
      - minio
    volumes:
      - ./mimir/mimir.yaml:/etc/mimir.yaml
      - mimir2-data:/data
    labels:
      namespace: monitoring

  mimir3:
    container_name: Mimir-3
    image: docker.io/grafana/mimir:2.13.1
    command: ["-config.file=/etc/mimir.yaml"]
    hostname: mimir3
    depends_on:
      - minio
    volumes:
      - ./mimir/mimir.yaml:/etc/mimir.yaml
      - mimir3-data:/data
    labels:
      namespace: monitoring
  
  # Continuous tests
  mimir-continuous-test:
    container_name: Mimir-Continuous-Tests
    image: docker.io/grafana/mimir-continuous-test:2.13.1
    command: "-tests.write-endpoint \"http://nginx:3702\" -tests.read-endpoint \"http://nginx:4702/prometheus\" -server.http-listen-port 8085"
    depends_on:
      - mimir1
      - mimir2
      - mimir3
    labels:
      namespace: monitoring

  ######################################################################################
  ######################################################################################
  ############################# GRAFANA TEMPO TRACES ###################################
  ######################################################################################
  ######################################################################################
  tempo1:
    container_name: Tempo-1
    image: docker.io/grafana/tempo:1.5.0
    command: "-target=scalable-single-binary -config.file=/etc/tempo.yaml"
    volumes:
      - ./tempo/tempo.yaml:/etc/tempo.yaml
    restart: always
    networks:
      default:
        aliases:
          - tempo
    depends_on:
      - minio
    labels:
      namespace: monitoring

  tempo2:
    container_name: Tempo-2
    image: docker.io/grafana/tempo:1.5.0
    command: "-target=scalable-single-binary -config.file=/etc/tempo.yaml"
    volumes:
      - ./tempo/tempo.yaml:/etc/tempo.yaml
    restart: always
    depends_on:
      - minio
    networks:
      default:
        aliases:
          - tempo
    labels:
      namespace: monitoring

  tempo3:
    container_name: Tempo-3
    image: docker.io/grafana/tempo:1.5.0
    command: "-target=scalable-single-binary -config.file=/etc/tempo.yaml"
    volumes:
      - ./tempo/tempo.yaml:/etc/tempo.yaml
    restart: always
    depends_on:
      - minio
    networks:
      default:
        aliases:
          - tempo
    labels:
      namespace: monitoring

  ######################################################################################
  ######################################################################################
  #################################### CADVISOR ########################################
  ######################################################################################
  ######################################################################################
  cadvisor:
    container_name: cadvisor
    image: docker.io/zcube/cadvisor:latest
    ports:
    - 8080:8080
    command:
    - --raw_cgroup_prefix_whitelist=/docker/
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /dev/disk/:/dev/disk:ro
    - /var/lib/docker/:/var/lib/docker:ro


volumes:
  mimir1-data:
  mimir2-data:
  mimir3-data:
  minio-data:
